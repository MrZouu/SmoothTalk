# -*- coding: utf-8 -*-
"""model_trainer_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yups_c55US-HCrxC_itd_ltnjFoJkm7P

# Initialisation
"""

!pip install split-folders matplotlib opencv-python spicy

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, random_split
from torchvision import transforms, models, datasets
from torchvision.models import resnet50, ResNet50_Weights
from tqdm import tqdm # Afficher entrainement en temps reel
import matplotlib.pyplot as plt # Dessiner graphes
import os
import zipfile #Intégrer fichier zip du drive
import splitfolders
from sklearn.metrics import precision_recall_fscore_support

from google.colab import files
import shutil

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Placer le dataset dans son drive au format zip
zip_train = zipfile.ZipFile('/content/drive/MyDrive/dataset.zip', 'r')
zip_train.extractall('/tmp')
zip_train.close()

"""# Pré-Traitement"""

# Définir la transformation des données
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))  # Normalisation des valeurs de pixel centré autour de 0 (-1 ; 1)
])

"""# Charger données"""

# Définir le chemin vers le dossier contenant le dataset
data_path = '/tmp/DATA'

# Charger le jeu de données ASL Alphabet
asl_dataset = datasets.ImageFolder(root=data_path, transform=transform)

# Diviser le jeu de données en ensembles d'entraînement et de test
dataset_size = len(asl_dataset)
train_size = int(0.8 * dataset_size)
test_size = dataset_size - train_size
train_dataset, test_dataset = random_split(asl_dataset, [train_size, test_size])

# Définir les chargeurs de données
train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True, num_workers=4)
test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False, num_workers=4)

"""# Resnet"""

class ResNet50(nn.Module):
    def __init__(self, num_classes, weights=None):
        super(ResNet50, self).__init__()
        # Charger le modèle pré-entraîné ResNet50
        self.resnet = resnet50(pretrained=True if weights is None else False)

        # Extraire les couches sauf la couche de classification finale (dernière couche)
        self.features = nn.Sequential(*list(self.resnet.children())[:-1])

        # Ajouter une nouvelle couche de classification adaptée au nombre de classes (26 lettres)
        self.fc = nn.Linear(self.resnet.fc.in_features, num_classes)

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x

# Instancier le modèle ResNet50, la fonction de coût et l'optimiseur
num_classes = 26  # Nombre de classes correspondant aux lettres de l'alphabet
# model = ResNet50(num_classes, weights=None).to(device)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")  # Sélectionner automatiquement le dispositif disponible
model = ResNet50(num_classes, weights=ResNet50_Weights.DEFAULT).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

"""# Entrainement"""

# Entraîner le modèle
num_epochs = 13

# Initialiser les listes pour stocker les statistiques d'entraînement
train_losses = []
train_accuracies = []
test_accuracies = []
class_precisions = []
class_recalls = []
class_f1_scores = []

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    progress_bar = tqdm(train_loader, desc=f'Epoch {epoch + 1}/{num_epochs}', leave=False, position=0, dynamic_ncols=True)

    for batch_idx, (inputs, labels) in enumerate(progress_bar):
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

        progress_bar.set_postfix(loss=f'{running_loss / (batch_idx + 1):.3f}', accuracy=f'{100 * correct / total:.2f}%')

    # Imprimer la statistique de l'ensemble d'entraînement à la fin de l'époque
    average_loss = running_loss / len(train_loader)
    accuracy = correct / total
    train_losses.append(average_loss)
    train_accuracies.append(accuracy)
    progress_bar.set_postfix(loss=f'{average_loss:.3f}', accuracy=f'{100 * accuracy:.2f}%')
    progress_bar.close()  # Fermer la barre de progression à la fin de l'époque

    # Tester le modèle sur les données de test après chaque époque
    model.eval()
    correct = 0
    total = 0
    all_labels = []
    all_predicted = []

    with torch.no_grad():
        for batch_idx, (inputs, labels) in enumerate(test_loader):
            inputs, labels = inputs.to(device), labels.to(device)

            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

            all_labels.extend(labels.cpu().numpy())
            all_predicted.extend(predicted.cpu().numpy())

    # Enregistrer la précision des tests
    test_accuracy = correct / total
    test_accuracies.append(test_accuracy)

precision, recall, f1_score, _ = precision_recall_fscore_support(all_labels, all_predicted, average=None)
class_precisions.append(precision)
class_recalls.append(recall)
class_f1_scores.append(f1_score)

# Afficher les métriques par classe
for i, (precision, recall, f1_score) in enumerate(zip(class_precisions[-1], class_recalls[-1], class_f1_scores[-1])):
    print(f"Class {i}: Precision={precision:.4f}, Recall={recall:.4f}, F1-Score={f1_score:.4f}")

"""# Graphes"""

# Tracer les courbes d'entraînement
plt.figure(figsize=(12, 4))

# Courbe de perte
plt.subplot(1, 2, 1)
plt.plot(train_losses, label='Train Loss', marker='o')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss Over Epochs')
plt.legend()

# Courbe d'exactitude
plt.subplot(1, 2, 2)
plt.plot(train_accuracies, label='Train Accuracy', marker='o')
plt.plot(test_accuracies, label='Test Accuracy', marker='o')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Test Accuracy Over Epochs')
plt.legend()

plt.tight_layout()
plt.show()

"""# Enregistrement du modèle"""

# Enregistrer le modèle à la fin de l'entraînement
torch.save(model.state_dict(), 'pytorch_model.pth')
print("Le modèle a été enregistré.")

files.download('pytorch_model.pth')